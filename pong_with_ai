import pygame
import random
import sys
import platform
import asyncio

# Initialize Pygame
pygame.init()

# Screen dimensions
WIDTH = 800
HEIGHT = 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Pong with AI Opponent")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Paddle and ball properties
PADDLE_WIDTH = 15
PADDLE_HEIGHT = 90
BALL_SIZE = 10
PADDLE_SPEED = 5
BALL_SPEED = 7

# Initialize paddles and ball
player = pygame.Rect(WIDTH - 30, HEIGHT // 2 - PADDLE_HEIGHT // 2, PADDLE_WIDTH, PADDLE_HEIGHT)
opponent = pygame.Rect(15, HEIGHT // 2 - PADDLE_HEIGHT // 2, PADDLE_WIDTH, PADDLE_HEIGHT)
ball = pygame.Rect(WIDTH // 2 - BALL_SIZE // 2, HEIGHT // 2 - BALL_SIZE // 2, BALL_SIZE, BALL_SIZE)
ball_speed_x = BALL_SPEED * random.choice((1, -1))
ball_speed_y = BALL_SPEED * random.choice((1, -1))

# Score
player_score = 0
opponent_score = 0
font = pygame.font.Font(None, 74)

# AI opponent logic
def move_opponent_ai(opponent, ball):
    # Simple rule-based AI: Move paddle towards ball's y-position
    if opponent.centery < ball.centery and opponent.bottom < HEIGHT:
        opponent.y += PADDLE_SPEED
    elif opponent.centery > ball.centery and opponent.top > 0:
        opponent.y -= PADDLE_SPEED

async def main():
    global ball_speed_x, ball_speed_y, player_score, opponent_score

    clock = pygame.time.Clock()
    FPS = 60

    while True:
        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        # Player movement
        keys = pygame.key.get_pressed()
        if keys[pygame.K_UP] and player.top > 0:
            player.y -= PADDLE_SPEED
        if keys[pygame.K_DOWN] and player.bottom < HEIGHT:
            player.y += PADDLE_SPEED

        # AI opponent movement
        move_opponent_ai(opponent, ball)

        # Ball movement
        ball.x += ball_speed_x
        ball.y += ball_speed_y

        # Ball collisions with top and bottom
        if ball.top <= 0 or ball.bottom >= HEIGHT:
            ball_speed_y *= -1

        # Ball collisions with paddles
        if ball.colliderect(player) or ball.colliderect(opponent):
            ball_speed_x *= -1

        # Scoring
        if ball.left <= 0:
            player_score += 1
            ball.center = (WIDTH // 2, HEIGHT // 2)
            ball_speed_x = BALL_SPEED * random.choice((1, -1))
            ball_speed_y = BALL_SPEED * random.choice((1, -1))
        elif ball.right >= WIDTH:
            opponent_score += 1
            ball.center = (WIDTH // 2, HEIGHT // 2)
            ball_speed_x = BALL_SPEED * random.choice((1, -1))
            ball_speed_y = BALL_SPEED * random.choice((1, -1))

        # Drawing
        screen.fill(BLACK)
        pygame.draw.rect(screen, WHITE, player)
        pygame.draw.rect(screen, WHITE, opponent)
        pygame.draw.ellipse(screen, WHITE, ball)
        pygame.draw.aaline(screen, WHITE, (WIDTH // 2, 0), (WIDTH // 2, HEIGHT))

        # Display scores
        player_text = font.render(str(player_score), True, WHITE)
        opponent_text = font.render(str(opponent_score), True, WHITE)
        screen.blit(player_text, (WIDTH // 4 * 3, 20))
        screen.blit(opponent_text, (WIDTH // 4, 20))

        pygame.display.flip()
        clock.tick(FPS)
        await asyncio.sleep(1.0 / FPS)

if platform.system() == "Emscripten":
    asyncio.ensure_future(main())
else:
    if __name__ == "__main__":
        asyncio.run(main())
